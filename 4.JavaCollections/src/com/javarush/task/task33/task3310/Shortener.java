package com.javarush.task.task33.task3310;

import com.javarush.task.task33.task3310.strategy.StorageStrategy;

/**
 * Artem Voytenko
 * 26.11.2018
 * <p>
 * Давай напишем укорачиватель Shortener. Это будет некий аналог укорачивателя
 * ссылок Google URL Shortener (https://goo.gl), но мы расширим его функциональность и
 * сделаем консольным. Он будет сокращать не только ссылки, но и любые строки.
 * Наш Shortener - это класс, который может для любой строки вернуть некий
 * уникальный идентификатор и наоборот, по ранее полученному идентификатору
 * вернуть строку.
 * <p>
 * Два дополнительных требования к Shortener:
 * - для двух одинаковых строк должен возвращаться один и тот же идентификатор;
 * - он должен поддерживать столько строк, сколько значений может принимать long,
 * именно этот тип будет использоваться для идентификатора.
 * Первое требование очень сильно влияет на производительность, т.к. при получении
 * идентификатора для новой строки мы должны проверить не обрабатывалась ли эта
 * строка ранее, чтобы вернуть старый идентификатор.
 * <p>
 * <p>
 * 3.4. Реализуй метод getId, он должен:
 * 3.4.1. Проверить есть ли переданное значение в хранилище, если есть - вернуть его ключ.
 * 3.4.2. Если преданного значения нет в хранилище, то:
 * 3.4.2.1. Увеличить значение lastId на единицу;
 * 3.4.2.2. Добавить в хранилище новую пару ключ-значение (новое значение lastId и переданную строку);
 * 3.4.2.3. Вернуть новое значение lastId.
 * 3.5. Реализуй метод getString, он должен вернуть строку по заданному идентификатору (ключу).
 * 3.6. Предусмотреть возможность вызова методов getId и getString из разных потоков добавив
 * соответствующий модификатор к заголовкам методов.
 * <p>
 * <p>
 * Требования:
 * 1. В классе Shortener должно быть создано приватное поле Long lastId инициализированное нулем.
 * 2. В классе Shortener должно быть создано приватное поле storageStrategy типа StorageStrategy.
 * 3. Конструктор класса Shortener должен принимать один параметр типа StorageStrategy и инициализировать им поле storageStrategy.
 * 4. Метод getId должен быть реализован в соответствии с условием задачи.
 * 5. Метод getString должен быть реализован в соответствии с условием задачи.
 */

public class Shortener {
	// последнее значение идентификатора, которое было использовано
	// при добавлении новой строки в хранилище
	private Long lastId = 0L;
	// будет храниться стратегия хранения данных
	private StorageStrategy storageStrategy;

	public Shortener(StorageStrategy storageStrategy) {
		this.storageStrategy = storageStrategy;
	}

	public synchronized Long getId(String string) {
		Long result = null;
		if (storageStrategy.containsValue(string)) {
			result = storageStrategy.getKey(string);
		} else {
			result = ++lastId;
			storageStrategy.put(result, string);
		}
		return result;
	}

	public synchronized String getString(Long id) {
		return storageStrategy.getValue(id);
	}
}
